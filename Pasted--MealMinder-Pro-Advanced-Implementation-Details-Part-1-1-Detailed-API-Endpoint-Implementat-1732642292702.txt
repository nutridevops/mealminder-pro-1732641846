# MealMinder Pro - Advanced Implementation Details (Part 1)

## 1. Detailed API Endpoint Implementations

### A. Core Service APIs

```typescript
// Health Service API Implementation
interface HealthServiceEndpoints {
  // Food Analysis Endpoints
  'POST /api/health/analyze': {
    body: {
      foodId: string;
      userId: string;
      context?: HealthContext;
    };
    response: {
      nutritionScore: number;
      nutrients: NutrientBreakdown;
      healthImpact: HealthImpact;
      warnings: HealthWarning[];
      recommendations: HealthSuggestion[];
    };
  };

  'POST /api/health/meal-analysis': {
    body: {
      mealItems: FoodItem[];
      userId: string;
      mealType: MealType;
      timeOfDay: string;
    };
    response: {
      overallScore: number;
      balanceAnalysis: MacroBalance;
      micronutrients: MicronutrientAnalysis;
      suggestions: MealImprovement[];
      alternatives: HealthierOption[];
    };
  };

  'GET /api/health/user-metrics/:userId': {
    query: {
      startDate: string;
      endDate: string;
      metrics: HealthMetricType[];
    };
    response: {
      metrics: {
        daily: DailyMetrics[];
        weekly: WeeklyMetrics;
        trends: HealthTrend[];
      };
      goals: GoalProgress[];
      recommendations: HealthRecommendation[];
    };
  };
}

// Chat Service API Implementation
interface ChatServiceEndpoints {
  'POST /api/chat/conversation': {
    body: {
      message: string;
      userId: string;
      context: {
        location?: GeoLocation;
        mealContext?: MealContext;
        previousMessages: ChatMessage[];
      };
    };
    response: {
      reply: string;
      actions: ChatAction[];
      suggestions: ChatSuggestion[];
      context: UpdatedContext;
    };
  };

  'POST /api/chat/order-processing': {
    body: {
      orderIntent: OrderIntent;
      userId: string;
      location: GeoLocation;
      preferences: UserPreferences;
    };
    response: {
      orderOptions: OrderOption[];
      healthAnalysis: HealthAnalysis[];
      pricing: PricingDetails;
      deliveryEstimates: DeliveryEstimate[];
    };
  };

  'POST /api/chat/health-guidance': {
    body: {
      query: string;
      userId: string;
      healthProfile: HealthProfile;
      recentChoices: FoodChoice[];
    };
    response: {
      guidance: HealthGuidance;
      alternatives: HealthyAlternative[];
      educationalContent: HealthEducation[];
      nextSteps: ActionStep[];
    };
  };
}

// Location Service API Implementation
interface LocationServiceEndpoints {
  'GET /api/location/healthy-venues': {
    query: {
      latitude: number;
      longitude: number;
      radius: number;
      healthScore: number;
      dietary: DietaryPreference[];
    };
    response: {
      venues: HealthyVenue[];
      analysis: LocationAnalysis;
      recommendations: VenueSuggestion[];
    };
  };

  'POST /api/location/travel-adaptation': {
    body: {
      userId: string;
      destination: Location;
      duration: TravelDuration;
      preferences: UserPreferences;
    };
    response: {
      adaptedPlan: TravelNutritionPlan;
      localOptions: LocalFoodOption[];
      healthyChoices: HealthyChoice[];
      culturalGuidance: CulturalDietInfo[];
    };
  };
}
```

### B. Implementation Examples

```typescript
// Health Analysis Controller
class HealthAnalysisController {
  async analyzeMeal(req: Request, res: Response) {
    try {
      const { mealItems, userId, mealType, timeOfDay } = req.body;

      // Validate request
      const validationResult = await validateMealAnalysisRequest(req.body);
      if (!validationResult.success) {
        return res.status(400).json(validationResult.errors);
      }

      // Get user context
      const userContext = await UserContextService.getUserContext(userId);

      // Perform health analysis
      const healthAnalysis = await HealthAnalysisService.analyzeMeal({
        mealItems,
        userContext,
        mealType,
        timeOfDay,
      });

      // Generate personalized recommendations
      const recommendations = await RecommendationService.generateMealRecommendations({
        analysis: healthAnalysis,
        userContext,
      });

      // Track analysis for user insights
      await AnalyticsService.trackMealAnalysis({
        userId,
        analysis: healthAnalysis,
        recommendations,
      });

      return res.status(200).json({
        success: true,
        data: {
          analysis: healthAnalysis,
          recommendations,
        },
      });

    } catch (error) {
      logger.error('Meal analysis error:', error);
      return res.status(500).json({
        success: false,
        error: 'Error analyzing meal',
      });
    }
  }
}

// Chat Controller
class ChatController {
  async processMessage(req: Request, res: Response) {
    try {
      const { message, userId, context } = req.body;

      // Process message with NLP
      const processedMessage = await NLPService.processMessage(message);

      // Get user context
      const userContext = await ChatContextService.getContext(userId);

      // Generate response
      const response = await ChatService.generateResponse({
        processedMessage,
        userContext,
        context,
      });

      // Update context
      await ChatContextService.updateContext(userId, response.context);

      // Track interaction
      await AnalyticsService.trackChatInteraction({
        userId,
        message,
        response,
      });

      return res.status(200).json({
        success: true,
        data: response,
      });

    } catch (error) {
      logger.error('Chat processing error:', error);
      return res.status(500).json({
        success: false,
        error: 'Error processing message',
      });
    }
  }
}
```

## 2. Database Relationships and Indexes

```prisma
// Enhanced schema.prisma with relationships and indexes

// User Management
model User {
  id                String          @id @default(uuid())
  email             String          @unique
  profile           Profile?
  healthProfile     HealthProfile?
  preferences       Preferences?
  mealPlans         MealPlan[]
  orders            Order[]
  healthMetrics     HealthMetric[]
  socialPosts       SocialPost[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@index([email])
  @@index([createdAt])
}

model Profile {
  id                String          @id @default(uuid())
  userId            String          @unique
  user              User            @relation(fields: [userId], references: [id])
  name              String
  location          Location?       @relation(fields: [locationId], references: [id])
  locationId        String?
  dietaryType       DietaryType[]
  allergies         Allergy[]
  intolerances      Intolerance[]
  preferences       Preference[]

  @@index([userId])
  @@index([locationId])
}

model HealthProfile {
  id                String          @id @default(uuid())
  userId            String          @unique
  user              User            @relation(fields: [userId], references: [id])
  healthGoals       HealthGoal[]
  medicalConditions MedicalCondition[]
  restrictions      DietaryRestriction[]
  metrics           HealthMetric[]
  currentWeight     Float?
  targetWeight      Float?
  height            Float?
  activityLevel     ActivityLevel
  stressLevel       StressLevel
  sleepQuality      SleepQuality
  lastUpdate        DateTime        @updatedAt

  @@index([userId])
  @@index([lastUpdate])
}

// Food and Nutrition
model FoodItem {
  id                String          @id @default(uuid())
  name              String
  nutritionInfo     NutritionInfo?
  healthScore       Float
  ingredients       Ingredient[]
  allergens         Allergen[]
  supplier          Supplier?       @relation(fields: [supplierId], references: [id])
  supplierId        String?
  categories        Category[]
  seasonality       Season[]
  organicCertified  Boolean         @default(false)
  processingLevel   ProcessingLevel
  popularity        Float           @default(0)

  @@index([healthScore])
  @@index([supplierId])
  @@index([name])
  @@index([popularity])
}

// Location and Suppliers
model Location {
  id                String          @id @default(uuid())
  latitude          Float
  longitude         Float
  address           String
  city              String
  country           String
  suppliers         Supplier[]
  venues            Venue[]
  profiles          Profile[]
  timezone          String
  popularTimes      PopularTimes[]
  lastUpdate        DateTime        @updatedAt

  @@index([city])
  @@index([country])
  @@index([latitude, longitude])
}

model Supplier {
  id                String          @id @default(uuid())
  name              String
  location          Location        @relation(fields: [locationId], references: [id])
  locationId        String
  type              SupplierType
  healthScore       Float
  products          FoodItem[]
  organic           Boolean
  ratings           Rating[]
  operatingHours    OperatingHours[]
  deliveryRadius    Float?
  minimumOrder      Float?
  maxDeliveryTime   Int?

  @@index([locationId])
  @@index([healthScore])
  @@index([type])
}
```

[Continued in Part 2...]